{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/scasum.js","../lib/main.js","../lib/index.js","../bb6267a70612db1bbed9876fd1e608"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport absf from '@stdlib/math-base-special-absf';\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex64';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {PositiveInteger} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} result\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1, 0 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX, offsetX ) {\n\tvar stemp;\n\tvar viewX;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tstemp = 0.0;\n\tif ( N <= 0 || strideX <= 0 ) {\n\t\treturn stemp;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tstemp += absf( viewX[ ix ] ) + absf( viewX[ ix+1 ] );\n\t\tix += sx;\n\t}\n\treturn stemp;\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {PositiveInteger} strideX - `cx` stride length\n* @returns {number} result\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX ) {\n\treturn ndarray( N, cx, strideX, 0 );\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport scasum from './scasum.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @module @stdlib/blas-base-scasum\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import scasum from '@stdlib/blas-base-scasum';\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 19.0\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import scasum from '@stdlib/blas-base-scasum';\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum.ndarray( cx.length, cx, 1, 0 );\n* // returns 19.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar scasum;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscasum = main;\n} else {\n\tscasum = tmp;\n}\n\n\n// EXPORTS //\n\nexport default scasum;\n\n// exports: { \"ndarray\": \"scasum.ndarray\" }\n","export default '/home/runner/work/blas-base-scasum/blas-base-scasum/lib'"],"names":["scasum","N","cx","strideX","offsetX","stemp","viewX","ix","sx","i","reinterpret","absf","ndarray","setReadOnly","tmp","tryRequire","join","require$$0","scasum$1","isError","main"],"mappings":";;g9FA6CA,SAASA,EAAQC,EAAGC,EAAIC,EAASC,GAChC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAJ,EAAQ,EACHJ,GAAK,GAAKE,GAAW,EACzB,OAAOE,EAKR,IAHAC,EAAQI,EAAaR,EAAI,GACzBM,EAAe,EAAVL,EACLI,EAAe,EAAVH,EACCK,EAAI,EAAGA,EAAIR,EAAGQ,IACnBJ,GAASM,EAAML,EAAOC,IAASI,EAAML,EAAOC,EAAG,IAC/CA,GAAMC,EAEP,OAAOH,CACR,CCrBA,SAASL,EAAQC,EAAGC,EAAIC,GACvB,OAAOS,EAASX,EAAGC,EAAIC,EAAS,EACjC,CChBAU,EAAAb,EAAA,UAAAY,GCiBA,IAQAZ,EACAc,EAAAC,GAAAC,EATAC,EAAAD,MC9Ce,0DDuDf,gBAUAE,EARAlB,EADAmB,EAAAL,GACAM,EAEAN"}