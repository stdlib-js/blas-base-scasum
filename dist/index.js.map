{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/scasum.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar absf = require( '@stdlib/math-base-special-absf' );\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex64' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {PositiveInteger} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @returns {number} result\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1, 0 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX, offsetX ) {\n\tvar stemp;\n\tvar viewX;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tstemp = 0.0;\n\tif ( N <= 0 || strideX <= 0 ) {\n\t\treturn stemp;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tstemp += absf( viewX[ ix ] ) + absf( viewX[ ix+1 ] );\n\t\tix += sx;\n\t}\n\treturn stemp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scasum;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - input array\n* @param {PositiveInteger} strideX - `cx` stride length\n* @returns {number} result\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n*\n* var cx = new Complex64Array( [ 5.0, -3.0, 6.0, 4.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 18.0\n*/\nfunction scasum( N, cx, strideX ) {\n\treturn ndarray( N, cx, strideX, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = scasum;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar scasum = require( './scasum.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( scasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = scasum;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the sum of the absolute values of the real and imaginary components of a single-precision complex floating-point vector.\n*\n* @module @stdlib/blas-base-scasum\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var scasum = require( '@stdlib/blas-base-scasum' );\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum( cx.length, cx, 1 );\n* // returns 19.0\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var scasum = require( '@stdlib/blas-base-scasum' );\n*\n* var cx = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var out = scasum.ndarray( cx.length, cx, 1, 0 );\n* // returns 19.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar scasum;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscasum = main;\n} else {\n\tscasum = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scasum;\n\n// exports: { \"ndarray\": \"scasum.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,gCAAiC,EACjDC,EAAc,QAAS,4CAA6C,EAsBxE,SAASC,EAAQC,EAAGC,EAAIC,EAASC,EAAU,CAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAJ,EAAQ,EACHJ,GAAK,GAAKE,GAAW,EACzB,OAAOE,EAKR,IAHAC,EAAQP,EAAaG,EAAI,CAAE,EAC3BM,EAAKL,EAAU,EACfI,EAAKH,EAAU,EACTK,EAAI,EAAGA,EAAIR,EAAGQ,IACnBJ,GAASP,EAAMQ,EAAOC,CAAG,CAAE,EAAIT,EAAMQ,EAAOC,EAAG,CAAE,CAAE,EACnDA,GAAMC,EAEP,OAAOH,CACR,CAKAR,EAAO,QAAUG,ICrEjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,IAqBd,SAASC,EAAQC,EAAGC,EAAIC,EAAU,CACjC,OAAOJ,EAASE,EAAGC,EAAIC,EAAS,CAAE,CACnC,CAKAL,EAAO,QAAUE,IClDjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAS,IACTC,EAAU,IAKdF,EAAaC,EAAQ,UAAWC,CAAQ,EAKxCH,EAAO,QAAUE,ICYjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAASD,EAETC,EAASC,EAMV,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "absf", "reinterpret", "scasum", "N", "cx", "strideX", "offsetX", "stemp", "viewX", "ix", "sx", "i", "require_scasum", "__commonJSMin", "exports", "module", "ndarray", "scasum", "N", "cx", "strideX", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "scasum", "ndarray", "join", "tryRequire", "isError", "main", "scasum", "tmp"]
}
